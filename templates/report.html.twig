{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>
    <p>Det här är min redovisningssida.</p>

    <div class="two-col-layout">
        <main class="main_about">

            <aside class="aside">
                <ul class="contents_report">
                    <li><a href="#kmom01">kmom01</a></li>
                    <li><a href="#kmom02">kmom02</a></li>
                    <li><a href="#kmom03">kmom03</a></li>
                    <li><a href="#kmom04">kmom04</a></li>
                    <li><a href="#kmom05">kmom05</a></li>
                    <li><a href="#kmom06">kmom06</a></li>
                    <li><a href="#kmom10">kmom10</a></li>
                </ul>
            </aside>

            <div class="content-container">
                <div class="text-content">
                    <h1>Redovisning</h1>

                        <h2 id="kmom01">kmom01</h2>

                        <ul>
                            <li>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</li>
                            <p>Innan jag påbörjade utbildningen på BTH (jag går första året webbprogrammering) så hade jag ingen erfarenhet av objektorientering. Däremot så har jag byggt på mina kunskaper under utbildningens gång, bl.a. genom kursen som handlar om objektorientering i Python.</p>

                            <br>

                            <li>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</li>
                            <p>En klass är som en mall som kan återanvändas för att skapa flera instanser av samma typ av sak. Ett objekt är i sin tur en faktisk instans av klassen. Med hjälp av $this kan man komma åt objektets egna variabler och metoder. Det är också bra att förstå public och private metoder, för det styr åtkomsten.</p>

                            <br>

                            <li>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</li>
                            <p>Till en början så kändes det ganska omfattande, och det var lite svårt att få grepp om hur allt hängde ihop. Men efter att ha följt artiklarna noga och testat lite själv utifrån dem så föll en pusselbit i taget på plats. Jag förstår fördelen med att ha det så här modulärt där vi delat upp controllers, templates och assets och annat tydligt. Det gör det enklare att sen bygga på och ändra.</p>

                            <br>

                            <li>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</li>
                            <p>Jag tycker avsnittet om enhetstestning var intressant. Artikeln nämner verktyg som PHPUnit och varför det är bra att köra tester kontinuerligt. Jag har i tidigare kurser fått testa på och skriva och använda tester. Men jag förstår här dels vikten av det, men även att PHP har flera olika verktyg för testning. Det ska bli intressant och se om vi dyker djupare ner i detta senare i kursen.</p>
                            <p>Det stod också tydligt beskrivet gällande det här med namespaces. Det var intressant att se hur detaljerad nivån av tipsen i de olika standarderna faktiskt är.</p>
                            <br>

                            <li>Vilken är din TIL för detta kmom?</li>
                            <p>Det får nog bli att inte döpa en commit till något som indikerar att ett kmom är färdigt. Så fort jag gjorde det så insåg jag att jag inte alls var färdig, så det var ju lite dumt. Men sen vill jag tillägga att jag också verkligen gillade bilden som fanns bifogad i övningsartikeln. Den beskrev på ett väldigt pedagogiskt sätt hur M:et, V:et och C:et i MVC hör ihop!</p>
                        </ul>

                        <br>

                        <h2 id="kmom02">kmom02</h2>

                        <ul>
                            <li>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</li>
                            <p>Arv handlar om att en klass kan just ärva egenskaper och metoder från någon annan klass. På det sättet blir koden mer DRY och strukturerad.</p>
                            <p>Med komposition menas att delar av en klass är hämtade från andra objekt. Så en klass kan vara en komposition av olika objekt.</p>
                            <p>Ett interface är som ett kontrakt som en klass lovar att följa. Så när en klass implementerar ett interface så visar den att den kan användas på ett särskilt sätt. Det här hjälper också till att strukturera koden och ansvarsfördelningen.</p>
                            <p>Trait är som en fristående kodmodul som klasser kan välja att använda. Om så görs så blir trait-koden som en del av klassen. Det här är något som används inom PHP istället för multipelt arv, som finns i andra programmeringsspråk.</p>

                            <br>

                            <li>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</li>
                            <p>Jag började med att pseudokoda en del för att skapa mig en bild av vad som behövde göras. Där fick jag ju också hjälp av att instruktionerna gav mig tydliga exempel att kunna utgå ifrån. Det blev därmed fyra klasser: Card, CardGraphic, DeckOfCards och CardHand.</p>
                            <p>Det kändes logiskt att låta CardGraphic ärva från Card. Och sen låta DeckOfCards innehålla alla kort genom komposition av Cards. Jag tänkte först presentera de olika funktionerna lite mer samlat, men märkte snabbt att den delen också blev enklare av att ha det ganska uppdelat mellan de olika sidorna.</p>
                            <p>Det var kul att det var många olika delar vi fick testa här som hänger ihop, med logik, presentation och API.</p>
                            <p>Överlag så är jag nöjd över att ha löst uppgiften. Sen går det som alltid att snygga till saker mer. Men jag har valt att lägga det mesta av krutet på funktionaliteterna.</p>

                            <br>

                            <li>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</li>
                            <p>Jag tycker ändå att det varit lite klurigt att komma in i det till en början. Den här känslan har jag ofta i början av nya kurser, och det känns ofta som att det går väldigt snabbt från ett språk till ett annat. Men allteftersom så ser jag likheterna med saker jag lärt mig i andra kurser.</p>
                            <p>En annan reflektion jag har är att det kodstrukturen ofta kan kännas överväldigande när man får själva ramarna för en uppgift. Nu tycker jag ändå det är bättre att vi får bra hjälp med det så klart, än att starta mer med ett tomt blad. Men det tar ändå lite tid att nysta ut hur allt hänger ihop. Här hjälper det att helt enkelt ta papper och penna och bara kort och enkelt rita upp hur olika delar av MVC hänger ihop med varandra. Det är logiskt, men det krävs att man kan ta ett steg tillbaka för att överblicka allt för att se logiken.</p>

                            <br>

                            <li>Vilken är din TIL för detta kmom?</li>
                            <p>Det var kul att få ökad förståelse och inblick i hur man jobbar med och bygger API. Det verkar vara väldigt användbart och efterfrågat när man tittar på världen utanför skolan.</p>
                        </ul>

                        <br>

                        <h2 id="kmom03">kmom03</h2>

                        <ul>
                            <li>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</li>
                            <p>Det tycker jag kändes väldigt bra och logiskt. Just flödesschema har jag aldrig gjort tidigare gällande programmering, men jag har jobbat väldigt mycket med det i mitt arbetsliv. Så jag vet värdet av det och kände mig ganska bekväm att bygga upp det.</p>
                            <p>Sen gällande pseudokoden så är det något jag använt mig av flera gånger tidigare i utbildningen. Beroende på vad uppgiften handlat om så kan det så klart se ganska olika ut. Men på något sätt så hjälper det mig alltid att konkretisera frågan "vad behöver koden åstadkomma?" i varje liten del. Jag kunde där till exempel se framför mig var if-satser skulle behövas, vad som händer under spelarens och bankens tur och hur spelet slutar.</p>
                            <p>Det är skönt att använda de här verktygen, eftersom det lättar på trycket att ha många delar i huvudet samtidigt. Att få ut det på pränt, även om det inte är så detaljerat eller alltid ens helt korrekt enligt vad slutresultatet blir, hjälper mig att kunna lägga fullt fokus på enbart vad nästa steg i kodningen är.</p>

                            <br>

                            <li>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</li>
                            <p>Jag valde att implementera spelets regler och funktionaliteter enligt instruktionerna, med fokus på KISS och strukturerat enligt principerna för MVC. Jag började med att skapa landningssidan och länkar till att starta spelet och dokumentationsdelarna som skulle vara med.</p>
                            <p>Jag skapade olika klasser för att ansvara för de olika delarna; TwentyOneGame för spelets logik, Bank för att hantera bankens tur och GameOver för att avgöra vem som vunnit. Det var också smidigt att kunna återanvända tidigare kortklasser, även om vissa behövde uppdateras något.</p>
                            <p>Jag är ändå ganska nöjd med resultatet för spelet fungerar som det ska (utifrån min förståelse för uppgiften och vad jag testat). Jag tycker koden är relativt enkel att följa och se strukturen i och jag har försökt skala på controllern.</p>
                            <p>Det som skulle kunna förbättras är kanske att ytterligare bryta ut delar av TwentyOneGame-klassen i flera klasser. Och som alltid kan allt alltid göras stiligare.</p>

                            <br>

                            <li>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</li>
                            <p>Som jag sagt tidigare så faller fler och fler bitar på plats allteftersom. Jag är lite osäker på om mitt minne sviker mig från Python-kursen, men jag vill minnas att vi där ändå kunde åstadkomma liknande resultat som här men med något mindre kod. Men jag är lite osäker om det bara är en känsla jag har nu när Symfony är nytt eller om det faktiskt är så.</p>

                            <br>

                            <li>Vilken är din TIL för detta kmom?</li>
                            <p>Mitt TIL för det här kursmomentet är nyttan av att börja snickra på strukturen och programmeringslogiken i ett flödesschema. Det är något jag kommer använda vidare!</p>
                        </ul>

                        <br>

                        <h2 id="kmom04">kmom04</h2>

                        <ul>
                            <li>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</li>
                            <p>Till en början så känns det lite bakvänt att skriva kod som testar annan kod. Det tar en liten stund innan man kommer in i tänket för vad det är man vill testa. Ibland kom jag på tester som jag senare insåg var ganska onödiga eller överflödiga. Men det var kul när man blev varmare i kläderna och försökte komma på tester som faktiskt ger något.</p>
                            <p>Vi har tassat in på det här med testning i en annan kurs vi läst. Men jag tycker det var särskilt bra förklarat med artiklar och exempel här!</p>

                            <br>

                            <li>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</li>
                            <p>Jag lyckades nå 100 procent kodtäckning för samtliga klasser. Jag tog helt enkelt en i taget och studerade sen rapporten efterhand för att se vad som fanns kvar att täcka in. Först var jag inte helt inställd på att nå 100 procent på allt, men det var ganska kul när jag väl kom in i tänket, så då var det bara att köra på.</p>

                            <br>

                            <li>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</li>
                            <p>Ja, överlag så tycker jag min kod känns relativt testbar. Nu är det ju inte en enorm kodbas, men jag har ändå delat upp metoderna tydligt med olika ansvar, så jag tycker det blev tydligt att förstå vad respektive metod behövde för typ av test till sig.</p>
                            <p>Metoder som har tydliga in- och utdata känns ganska smidiga att skriva tester för. Men jag har lärt mig att det kan vara lite mer utmanande när det finns loopar och beroenden till andra ojekt inblandade. Det kommer bli intressant framöver att skriva tester till sådan något mer komplex kod. Jag kommer nog också försöka tänka lite mer på testningen redan när jag skriver metoderna från första början framöver också.</p>

                            <br>

                            <li>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</li>
                            <p>Jag kunde hålla källkoden relativt intakt sedan innan det här kursmomentet. Men en midre uppdatering jag fick göra var kopplat till att bortse ifrån en varning som kom från linten. Det handlade om att den inte gillade att jag använde statiska metoder. Men vad jag kunnat läsa mig till så passar det och är helt rimligt att använda i de fall jag gjort det. Så därför valde jag att inte ändra utan istället lägga in ett undantag för det.</p>

                            <br>

                            <li>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</li>
                            <p>Ja, jag tycker det är ganska tydligt att det hänger ihop. Om jag tänker på de enklaste testerna att komma på och utforma så var det ju för metoderna som var så avskalade och fokuserade som möjligt. Så ju större och mer invecklade metoder blir desto svårare blir det att skriva bra tester, eftersom det då finns fler aspekter och nyanser att ta hänsyn till i testet.</p>

                            <br>

                            <li>Vilken är din TIL för detta kmom?</li>
                            <p>Att det är värt jobbet att bygga upp bra tester. Innstallation och förberedelser gav mig visst huvudbry, men sen när väl strukturen var på plats så var det ganska kul att bygga ut med fler tester faktiskt!</p>
                        </ul>

                        <br>

                        <h2 id="kmom05">kmom05</h2>

                        <ul>
                            <li>Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?</li>
                            <p>Ja, jag tycker det gick ganska bra att jobba sig igenom det. Jag uppskattar verkligen att instruktionerna och genomgångarna är så tydliga och strukturerade. Det är annars lätt att tappa bort sig, eller om man missat en del så kan det krävas en hel del detektivarbete för att komma upp på rätt spår igen. Jag förstår att det också är en förmåga som är viktig att träna upp inom programmering, men risken i det här avseendet hade varit att det faktiskt skulle gå ut över inlärningen.</p>
                            <p>Det var kul att lära sig att hantera databasen genom Doctrine och se hur smidigt det var, och jämföra med att skriva ren SQL-kod. Till en början var det lite rörigt att hålla koll på relationerna mellan alla delar. Men det föll sedan ganska snabbt på plats när jag fick testa att bygga saker mer på egen hand.</p>

                            <br>

                            <li>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</li>
                            <p>Min applikation bygger på det föreslagna biblioteket, där man då kan se alla böcker, lägga till och ta bort samt uppdatera befintliga böcker. Jag hade som mål att hålla det så samlat som möjligt, och inte sprida ut funktionerna i fler vyer än nödvändigt.</p>
                            <p>Eftersom fokus här ligger på att lära sig funktionaliteter så valde jag att hålla styling relativt sparsmakad. Där går det självklart att snygga till saker, men jag tycker ändå att det går att läsa all information tydligt och förstå hur man naivgerar mellan de olika funktionerna på att bra sätt. En sådan sak som att jobba med buttons istället för enbart klickbar länktext är en relativ liten skillnad, men som jag ändå upplever bidrar mycket till användarupplevelsen. Undermedvetet så är det mer logiskt att ögonen drar sig till det som liknar knappar, eftersom vi i vår digitala vardag tränats mycket på att de just är klickbara.</p>

                            <br>

                            <li>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</li>
                            <p>Det gick överlag ganska bra att jobba med ORM och CRUD. Det känns smidigt att låta Doctrine hantera kopplingen mot databasen, och då slippa skriva manuell SQL för varje del.</p>
                            <p>Samtidigt ser jag stort värde i att ha genomgått databas-kursen innan detta, för att därigenom få förståelse för SQL och databashantering. Därför kunde jag ganska snabbt förstå vad det var som hände "bakom kulisserna" i de här stegen.</p>

                            <br>

                            <li>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</li>
                            <p>Jag tycker det känns positivt i det avseendet att det är mer integrerat i kodbasen, jämfört med att separera det till ren SQL. Nu förstår jag samtidigt att vi är på en grundläggande nivå. Det återstår att se hur jag upplever lite mer komplexa situationer.</p>

                            <br>

                            <li>Vilken är din TIL för detta kmom?</li>
                            <p>Det var intressant att lära sig mer om dotenv. Det är en av många saker som jag sett och hört innan, men nog aldrig riktigt dykt vidare i.</p>
                        </ul>

                        <br>

                        <h2 id="kmom06">kmom06</h2>

                        <ul>
                            <li>Hur uppfattade du verktyget Phpmetrics och fann du några särskilda bitar mer värdefulla än andra? Var det några särskilda metrics eller bilder du uppskattade?</li>
                            <p>Jag tyckte att Phpmetrics var ganska smidigt att använda och att det ger en rätt bra överblick över olika aspekter av kodkvalitet. En vy jag verkligen gillade var tabellen där man ser komplexiteten. Den hjälper mig genom att ge en fingervisning om var det finns potential för förbättring. Även om alla siffror inte alltid stämmer med min magkänsla så tyckte jag att det fanns ett bra stöd i verktyget för att få igång mina egna reflektioner.</p>

                            <br>

                            <li>Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? Vilken kodtäckning och kodkvalitet fick du efter första bygget?</li>
                            <p>Scrutinizer var enkelt att koppla till mitt repo, och det känns verkligen som ett proffsigt verktyg! Jag uppskattade hur tydligt det visar vad som är problem, och hur det kategoriserar allt. Första bygget gav mig en quality score på 9.93, vilket var bättre än jag trodde. Sen att kodtäckningen var låg (19 %) var något jag var medveten om. Det var i mångt och mycket kopplat till att jag i tidigare moment valt att inte lägga in tester för mina controllers. Efter förbättringarna ökade kvalitetsbetyget till 9.96 och kodtäckningen till 25%. Badgesen är också lite motiverande, det känns kul att få visa upp att man har hög kvalitet eller att man lyckats öka sin testtäckning.</p>

                            <br>

                            <li>Hur är din egen syn på kodkvalitet, berätta lite om den? Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du?</li>
                            <p>För mig handlar kodkvalitet mycket om hur lätt koden är att förstå, uppdatera och testa. Jag har nog tidigare tänkt lite mer på om min kod följer rätt stil och struktur, men nu har jag fått mer fokus på saker som ansvarsfördelning, testbarhet och hur beroenden ser ut. Jag tror att badges kan visa viss typ av kvalitet, till exempel om man har hög kodtäckning eller få issues. Men samtidigt är min uppfattning, som ny i detta, att de verkligen inte säger allt. En del förbättringar märks kanske väldigt lite i mätvärdena men kan ändå göra stor skillnad för underhållbarheten. Så jag tror det viktigaste är att använda verktygen som ett stöd, och samtidigt själv vara noga med att ta ansvar för att tänka igenom hur koden egentligen funkar. Jag ser också risk med att lägga för mycket tid på att få till fina betyg i olika verktyg, som kanske i slutändan inte ger så mycket verkligt mervärde.</p>

                            <br>

                            <li>Vilken är din TIL för detta kmom?</li>
                            <p>Det är att jag fått ökad förståelse för vad CI/CD innebär, och att få ha testat på det i verkligheten. Det var intressant!</p>
                        </ul>

                        <br>

                        <h2 id="kmom10">kmom10</h2>
                </div>
            </div>

        </main>
    </div>

{% endblock %}
