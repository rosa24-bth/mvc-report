{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>
    <p>Det här är min redovisningssida.</p>

    <div class="two-col-layout">
        <main class="main_about">

            <aside class="aside">
                <ul class="contents_report">
                    <li><a href="#kmom01">kmom01</a></li>
                    <li><a href="#kmom02">kmom02</a></li>
                    <li><a href="#kmom03">kmom03</a></li>
                    <li><a href="#kmom04">kmom04</a></li>
                    <li><a href="#kmom05">kmom05</a></li>
                    <li><a href="#kmom06">kmom06</a></li>
                    <li><a href="#kmom10">kmom10</a></li>
                </ul>
            </aside>

            <div class="content-container">
                <div class="text-content">
                    <h1>Redovisning</h1>

                        <h2 id="kmom01">kmom01</h2>

                        <ul>
                            <li>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</li>
                            <p>Innan jag påbörjade utbildningen på BTH (jag går första året webbprogrammering) så hade jag ingen erfarenhet av objektorientering. Däremot så har jag byggt på mina kunskaper under utbildningens gång, bl.a. genom kursen som handlar om objektorientering i Python.</p>

                            <br>

                            <li>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</li>
                            <p>En klass är som en mall som kan återanvändas för att skapa flera instanser av samma typ av sak. Ett objekt är i sin tur en faktisk instans av klassen. Med hjälp av $this kan man komma åt objektets egna variabler och metoder. Det är också bra att förstå public och private metoder, för det styr åtkomsten.</p>

                            <br>

                            <li>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</li>
                            <p>Till en början så kändes det ganska omfattande, och det var lite svårt att få grepp om hur allt hängde ihop. Men efter att ha följt artiklarna noga och testat lite själv utifrån dem så föll en pusselbit i taget på plats. Jag förstår fördelen med att ha det så här modulärt där vi delat upp controllers, templates och assets och annat tydligt. Det gör det enklare att sen bygga på och ändra.</p>

                            <br>

                            <li>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</li>
                            <p>Jag tycker avsnittet om enhetstestning var intressant. Artikeln nämner verktyg som PHPUnit och varför det är bra att köra tester kontinuerligt. Jag har i tidigare kurser fått testa på och skriva och använda tester. Men jag förstår här dels vikten av det, men även att PHP har flera olika verktyg för testning. Det ska bli intressant och se om vi dyker djupare ner i detta senare i kursen.</p>
                            <p>Det stod också tydligt beskrivet gällande det här med namespaces. Det var intressant att se hur detaljerad nivån av tipsen i de olika standarderna faktiskt är.</p>
                            <br>

                            <li>Vilken är din TIL för detta kmom?</li>
                            <p>Det får nog bli att inte döpa en commit till något som indikerar att ett kmom är färdigt. Så fort jag gjorde det så insåg jag att jag inte alls var färdig, så det var ju lite dumt. Men sen vill jag tillägga att jag också verkligen gillade bilden som fanns bifogad i övningsartikeln. Den beskrev på ett väldigt pedagogiskt sätt hur M:et, V:et och C:et i MVC hör ihop!</p>
                        </ul>

                        <br>

                        <h2 id="kmom02">kmom02</h2>

                        <ul>
                            <li>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</li>
                            <p>Arv handlar om att en klass kan just ärva egenskaper och metoder från någon annan klass. På det sättet blir koden mer DRY och strukturerad.</p>
                            <p>Med komposition menas att delar av en klass är hämtade från andra objekt. Så en klass kan vara en komposition av olika objekt.</p>
                            <p>Ett interface är som ett kontrakt som en klass lovar att följa. Så när en klass implementerar ett interface så visar den att den kan användas på ett särskilt sätt. Det här hjälper också till att strukturera koden och ansvarsfördelningen.</p>
                            <p>Trait är som en fristående kodmodul som klasser kan välja att använda. Om så görs så blir trait-koden som en del av klassen. Det här är något som används inom PHP istället för multipelt arv, som finns i andra programmeringsspråk.</p>

                            <br>

                            <li>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</li>
                            <p>Jag började med att pseudokoda en del för att skapa mig en bild av vad som behövde göras. Där fick jag ju också hjälp av att instruktionerna gav mig tydliga exempel att kunna utgå ifrån. Det blev därmed fyra klasser: Card, CardGraphic, DeckOfCards och CardHand.</p>
                            <p>Det kändes logiskt att låta CardGraphic ärva från Card. Och sen låta DeckOfCards innehålla alla kort genom komposition av Cards. Jag tänkte först presentera de olika funktionerna lite mer samlat, men märkte snabbt att den delen också blev enklare av att ha det ganska uppdelat mellan de olika sidorna.</p>
                            <p>Det var kul att det var många olika delar vi fick testa här som hänger ihop, med logik, presentation och API.</p>
                            <p>Överlag så är jag nöjd över att ha löst uppgiften. Sen går det som alltid att snygga till saker mer. Men jag har valt att lägga det mesta av krutet på funktionaliteterna.</p>

                            <br>

                            <li>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</li>
                            <p>Jag tycker ändå att det varit lite klurigt att komma in i det till en början. Den här känslan har jag ofta i början av nya kurser, och det känns ofta som att det går väldigt snabbt från ett språk till ett annat. Men allteftersom så ser jag likheterna med saker jag lärt mig i andra kurser.</p>
                            <p>En annan reflektion jag har är att det kodstrukturen ofta kan kännas överväldigande när man får själva ramarna för en uppgift. Nu tycker jag ändå det är bättre att vi får bra hjälp med det så klart, än att starta mer med ett tomt blad. Men det tar ändå lite tid att nysta ut hur allt hänger ihop. Här hjälper det att helt enkelt ta papper och penna och bara kort och enkelt rita upp hur olika delar av MVC hänger ihop med varandra. Det är logiskt, men det krävs att man kan ta ett steg tillbaka för att överblicka allt för att se logiken.</p>

                            <br>

                            <li>Vilken är din TIL för detta kmom?</li>
                            <p>Det var kul att få ökad förståelse och inblick i hur man jobbar med och bygger API. Det verkar vara väldigt användbart och efterfrågat när man tittar på världen utanför skolan.</p>
                        </ul>

                        <br>
                        <h2 id="kmom03">kmom03</h2>
                        <h2 id="kmom04">kmom04</h2>
                        <h2 id="kmom05">kmom05</h2>
                        <h2 id="kmom06">kmom06</h2>
                        <h2 id="kmom10">kmom10</h2>
                </div>
            </div>

        </main>
    </div>

{% endblock %}
